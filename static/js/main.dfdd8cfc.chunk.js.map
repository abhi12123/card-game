{"version":3,"sources":["components/PlayerDetails.js","components/LandingPage.js","components/CardGameClasses.js","components/PlayerCard.js","components/ShuffledPage.js","App.js","index.js"],"names":["PlayerDetails","props","useState","value","setValue","playerArray","playerNum","onChange","e","preventDefault","target","changeValue","every","element","setShuffleButton","LandingPage","option","setOption","Array","fill","length","shuffleButton","className","changeOption","map","x","i","onClick","setPageNum","pageNum","setPlayerArray","Card","suite","this","Deck","charaterValues","cards","intialise","j","push","pop","card","sort","a","b","Math","random","Player","name","totalScore","getValue","Table","players","player","deck","shuffle","giveCard","removeCard","getScore","PlayerCard","index","ShuffledPage","back","table","shuffling","setShuffling","setTimeout","addPlayer","distribute","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dfdd8cfc.chunk.js","sourcesContent":["import React,{useState} from 'react';\r\n\r\nconst PlayerDetails = (props) => {\r\n    const [value,setValue]=useState('')\r\n    const changeValue = (e) => {\r\n        e.preventDefault();\r\n        setValue(e.target.value);\r\n    }\r\n\r\n    //input value is stored to name array\r\n    props.playerArray[props.playerNum-1] = value;\r\n    return(\r\n        <div>\r\n            <label>Player {props.playerNum} </label>\r\n            <input onChange={e=>changeValue(e)} value={value}></input>\r\n            {   //if every element of playerarray is not empty then setShuffleButton is made true, else false\r\n                props.playerArray.every((element) => element !== '')?\r\n                    props.setShuffleButton(true): props.setShuffleButton(false)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlayerDetails;","import React,{useState} from 'react';\r\nimport PlayerDetails from './PlayerDetails';\r\n\r\n//Welcome Page\r\nconst LandingPage = (props) => {\r\n    const [option,setOption]=useState(0);\r\n    //playerArray stores the input names. By default 10 elements with empty strings\r\n    const playerArray = new Array(10).fill('');\r\n    //length to be changed dynamically as per the option\r\n    playerArray.length=option;\r\n    const changeOption = (e) => {\r\n        setOption(e.target.value);\r\n    }\r\n    const [shuffleButton, setShuffleButton] = useState(false);\r\n    const shuffle = () => {\r\n        //goes to the next page\r\n        props.setPageNum(props.pageNum+1);\r\n        //saves the player array\r\n        props.setPlayerArray(playerArray);\r\n    }\r\n\r\n    return(\r\n        <div className='landing-page'>\r\n            <h1>Welcome</h1>\r\n            <label>Enter the Number of Players</label>\r\n            <select onChange={e=>changeOption(e)}>\r\n                <option value={0}>0</option>\r\n                <option value={1}>1</option>\r\n                <option value={2}>2</option>\r\n                <option value={3}>3</option>\r\n                <option value={4}>4</option>\r\n                <option value={5}>5</option>\r\n                <option value={6}>6</option>\r\n                <option value={7}>7</option>\r\n                <option value={8}>8</option>\r\n                <option value={9}>9</option>\r\n                <option value={10}>10</option>\r\n            </select>\r\n            {   \r\n                playerArray.map(\r\n                    (x,i) => <PlayerDetails playerNum={i+1} playerArray={playerArray} setShuffleButton={setShuffleButton}/>\r\n                )\r\n            }\r\n            <br/>\r\n            {   //checks whether shuffleButton is true. If true then Shuffle Button is rendered\r\n                shuffleButton?<button onClick = {() => shuffle()}>Shuffle</button>:true\r\n            }\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LandingPage;","class Card {\r\n    constructor (suite,value) {\r\n        this.suite = suite;\r\n        this.value = value;\r\n    }\r\n    //returns the converted value of the card\r\n    getValue() {\r\n        switch(this.value){\r\n            case 'J' : return 11;\r\n            case 'Q' : return 12;\r\n            case 'K' : return 13;\r\n            case 'A' : return 14;\r\n            default : return this.value;\r\n        }\r\n    }\r\n}\r\n\r\nclass Deck{\r\n    constructor(){\r\n        this.suite = ['S','C','H','D'];\r\n        this.charaterValues=['J','Q','K','A']\r\n        //creating an array of Card objects\r\n        this.cards=[];\r\n        //initialises the deck with 52 cards\r\n        this.intialise=function(){\r\n            for(let j of this.suite){\r\n                //initialises cards from 2 to 10\r\n                for(let i=2;i<11;i++){            \r\n                    this.cards.push(new Card(j,i));\r\n                }\r\n                //initialises cards from J,Q,K and A\r\n                for(let i of this.charaterValues){\r\n                    this.cards.push(new Card(j,i));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    //removes and returns topmost card from deck if the deck is not empty\r\n    removeCard(){\r\n        if(this.cards.length===0){\r\n            return true;\r\n        }else{\r\n            return this.cards.pop();\r\n        }\r\n    }\r\n    //adds the argument card object to the deck if the deck is not full\r\n    addCard(card){\r\n        if(this.cards.length===52){\r\n            return true;\r\n        }else{\r\n            for(let i=0;i<this.cards.length;i++){\r\n                if(this.cards[i].suite === card.suite && this.cards[i].value === card.value){\r\n                        return true;\r\n                }\r\n            }\r\n            this.cards.push(card);\r\n        }\r\n    }\r\n    //shuffles the deck\r\n    shuffle(){\r\n        this.cards.sort(function(a, b){return 0.5 - Math.random()});\r\n    }\r\n}\r\n\r\nclass Player{\r\n    constructor(name){\r\n        this.name=name;\r\n        this.cards=[];\r\n    }\r\n    //gives argument card to the player\r\n    giveCard(card){\r\n        this.cards.push(card);\r\n    }\r\n    //sums and returns the value of the total cards of the player\r\n    getScore(){\r\n        let totalScore=0;\r\n        for(let i in this.cards){\r\n            totalScore+=this.cards[i].getValue();\r\n        }\r\n        return totalScore;\r\n    }\r\n}\r\n\r\nclass Table{\r\n    constructor(){\r\n        this.players=[];\r\n    }\r\n    //adds atmost 10 players to the table\r\n    addPlayer(player){\r\n        if(this.players.length===10){\r\n            return true;\r\n        }else{\r\n            this.players.push(player);\r\n        }\r\n    }\r\n    //distributes the deck object to the players at the table\r\n    distribute(deck){\r\n        //shuffles the deck before distributing\r\n        deck.shuffle(); \r\n        let j=0;\r\n        while(deck.cards.length>0){\r\n            if(j===this.players.length){\r\n                j=0;\r\n            }\r\n            this.players[j].giveCard(deck.removeCard());\r\n            j++;\r\n        }\r\n    }\r\n    //displays the score in ascending order\r\n    playerScoreOrder(){\r\n        this.players.sort(\r\n            function(a,b) { return (a.getScore() - b.getScore()) } \r\n        )        \r\n    }\r\n}\r\n\r\nexport {Table,Deck,Player};","import React from 'react';\r\n\r\nconst PlayerCard = (props) => {\r\n    \r\n    return(\r\n        <div className=\"player-card\">\r\n            <h3>Player {props.index}</h3>\r\n            <h2>{props.player.name}</h2>\r\n            <h2>{props.player.getScore()}</h2>\r\n            {   //maps through the player's cards are displays the suite and value\r\n                props.player.cards.map(e => (<h4>{e.suite} {e.value}</h4>))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlayerCard;","import React,{useEffect, useState} from 'react';\r\nimport {Table,Deck,Player} from './CardGameClasses';\r\nimport PlayerCard from './PlayerCard';\r\n\r\nconst ShuffledPage = (props) => {\r\n    //goes to the previous page\r\n    const back = () => {\r\n        props.setPageNum(1)\r\n    }\r\n    let table = new Table();\r\n    let deck = new Deck();\r\n    deck.intialise();\r\n\r\n    const [ shuffling, setShuffling ] = useState(true)\r\n\r\n    setTimeout(\r\n        () => {setShuffling(false)}, 3000\r\n    )\r\n\r\n    if (shuffling) {\r\n        return (\r\n            <h1 className='shuffling'>Shuffling...</h1>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className='shuffled-page'>\r\n            <h1>Shuffled Menu</h1>\r\n            <div className=\"player-cards\">\r\n                {   //maps through the player array and creates new Player and adds to the table\r\n                    props.playerArray.map(e => (table.addPlayer(new Player(e))))\r\n                }\r\n                {   //deck is distributed to the table\r\n                    table.distribute(deck)\r\n                }\r\n                {   //maps thorough players of the table PlayerCard is rendered for each player\r\n                    table.players.map((e,i) => (<PlayerCard player={e} index={i+1}/>))\r\n                }\r\n            </div>\r\n            <button onClick = {() =>back}>Back</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ShuffledPage;","import React, { useState } from 'react';\nimport './App.css';\nimport LandingPage from './components/LandingPage';\nimport ShuffledPage from './components/ShuffledPage';\n\nconst App = () => {\n  //pageNum returns respective pages\n  const [pageNum,setPageNum] = useState(1);\n  const [playerArray,setPlayerArray] = useState([]);\n  switch(pageNum) {\n    case 1 : return <LandingPage setPageNum={setPageNum} pageNum={pageNum} setPlayerArray={setPlayerArray}/>;\n    case 2 : return <ShuffledPage setPageNum={setPageNum} pageNum={pageNum} playerArray={playerArray}/>;\n    default : return <LandingPage setPageNum={setPageNum} pageNum={pageNum} setPlayerArray={setPlayerArray}/>;\n  }\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}